package gameExceptions;

import actor.characteristics.status.IStatus;
import actor.characteristics.traits.BasicTrait;
import actor.characteristics.traits.ITrait;
import objects.IObject;

/**
 * Exception generated by the game malfunction.
 * @author Thomas MEDARD
 */
public class GameException extends Exception{

	/**
	 * Generated for serialization
	 */
	private static final long serialVersionUID = 1642409915850351094L;

	/**
	 * The type of exception to see immediately what it is and for exception handling.
	 * @author Thomas MEDARD
	 */
	public enum ExceptionType {
		/**
		 * If an {@link IObject} is too heavy for a certain action.
		 */
		OBJECT_WEIGHT, 
		/**
		 * If an {@link ITrait} is required but not owned.
		 */
		REQUIRED_TRAIT,
		/**
		 * If an {@link IObject} is not of an expecting type.
		 */
		UNKNOWN_OBJECT,
		/**
		 * If an {@link ITrait} is not is not of an expecting type.
		 */
		UNKNOWN_TRAIT, 
		/**
		 * If an {@link IStatus} is not of an expecting type.
		 */
		UNKNOWN_STATUS,
		/**
		 * If an {@link BasicTrait} is not of an expecting type.
		 */
		UNKNOWN_BASICTRAIT,
		/**
		 * If an {@link objects.equipables.wearables.armors.IArmor.ArmorType} is not of an expecting type.
		 */
		UNKNOWN_ARMORTYPE, 
		/**
		 * If an {@link objects.equipables.weapons.IWeapon.DamageType} is not of an expecting type.
		 */
		UNKNOWN_DAMAGETYPE
	}
	
	/**
	 * The {@link ExceptionType} of thi {@link GameException}.
	 */
	private final ExceptionType exceptionType;
	
	/**
	 * The constructor
	 * @param exceptionType The {@link ExceptionType} of thi {@link GameException}.
	 */
	public GameException(final ExceptionType exceptionType) {
		super();
		this.exceptionType = exceptionType;
	}

	/**
	 * The full constructor.
	 * @param message {@link Exception#Exception(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)}.
	 * @param cause {@link Exception#Exception(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)}.
	 * @param enableSuppression {@link Exception#Exception(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)}.
	 * @param writableStackTrace {@link Exception#Exception(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)}.
	 * @param exceptionType {@link Exception#Exception(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)}.
	 */
	public GameException(
			final String message, 
			final Throwable cause, 
			final boolean enableSuppression, 
			final boolean writableStackTrace,
			final ExceptionType exceptionType) {
		super(message, cause, enableSuppression, writableStackTrace);
		this.exceptionType = exceptionType;
	}

	/**
	 * An other constructor.
	 * @param message {@link Exception#Exception(String message, Throwable cause)}.
	 * @param cause {@link Exception#Exception(String message, Throwable cause)}.
	 * @param exceptionType {@link Exception#Exception(String message, Throwable cause)}.
	 */
	public GameException(final String message, final Throwable cause, final ExceptionType exceptionType) {
		super(message, cause);
		this.exceptionType = exceptionType;
	}

	/**
	 * An other constructor.
	 * @param message {@link Exception#Exception(String message)}.
	 * @param exceptionType {@link Exception#Exception(String message)}.
	 */
	public GameException(String message, final ExceptionType exceptionType) {
		super(message);
		this.exceptionType = exceptionType;
	}

	/**
	 * @see java.lang.Throwable#toString()
	 */
	@Override
	public String toString() {
		return exceptionType + System.lineSeparator() + super.toString();
	}
}
